{"version":3,"sources":["app.js","OrderService.js","PostController.js","UserController.js","ViewController.js","Paginator.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbphfile":"app.js","sourcesContent":["/*\n* @author: Leandro Henrique Reis <henrique@henriquereis.com>\n* @date:   2016-05-29 19:43:41\n* @last modified by:   Leandro Henrique Reis\n* @last modified time: 2016-07-08 06:14:17\n*/\n\n'use strict';\n\nangular.module('ruptZero',[\n    'OrderService',\n    'PaginatorData',\n    'ckeditor'\n]);","/*\n* @author: Leandro Henrique Reis <henrique@henriquereis.com>\n* @date:   2016-05-18 10:34:27\n* @last modified by:   Leandro Henrique Reis\n* @last modified time: 2016-07-03 10:08:36\n*/\nangular.module('OrderService', []).service('OrderService', [\n    function() {\n        var order = {};\n        return {\n            get: function(modulo, item) {\n                if (order[modulo] == undefined) {\n                    order[modulo] = {};\n                }\n\n                if (order[modulo][item] == undefined) {\n                    order[modulo][item] = -1;\n                }\n\n                order[modulo][item] += 1;\n\n                if (order[modulo][item] === 2) {\n                    delete order[modulo][item];\n\n                    return getOrder(order[modulo]);\n                }\n\n                return getOrder(order[modulo]);\n            },\n            byOrder: function(modulo, item) {\n                if (order[modulo] == undefined) {\n                    return 'random';\n                }\n\n                if (order[modulo][item] == undefined) {\n                    return 'random';\n                }\n\n                if (order[modulo][item] === 0) {\n                    return 'asc';\n                }\n\n                return 'desc';\n            }\n        };\n\n        function getOrder(modulo) {\n            var order = [];\n            for (var key in modulo) {\n                if (modulo.hasOwnProperty(key)) {\n                    if (modulo[key] === 1) {\n                        order.push('-' + key);\n                    } else {\n                        order.push(key);\n                    }\n                }\n            }\n            return order;\n        }\n    }\n]);\n","/*\n* @author: Leandro Henrique Reis <henrique@henriquereis.com>\n* @date:   2016-05-29 19:37:24\n* @last modified by:   Leandro Henrique Reis\n* @last modified time: 2016-09-01 10:02:25\n*/\n\n'use strict';\n\nangular.module('ruptZero')\n.controller('PostController', ['$scope', '$http', '$filter', 'Paginator', 'OrderService', \n    function($scope, $http, $filter, Paginator, OrderService){\n\n// Editor options.\n  $scope.options = {\n    language: 'en',\n    allowedContent: true,\n    entities: false\n  };\n\n  // Called when the editor is completely ready.\n  $scope.onReady = function () {\n    // ...\n  };\n  \n        $scope.pagination= {\n            perPage: 20,\n            currentPage: 1,\n            totalPages: 0,\n            totalItems: 0,\n            currentItem: 0,\n            totalCurrentPage: 0, \n            pageNumbers: []\n        };\n\n        $scope.post={};\n        var posts={\n            all: [],\n            filtered: [],\n            list: [],\n            paginated: []\n        };\n\n        $scope.posts=[];\n\n\n        $scope.save=function(post)\n        {\n            console.log(post);\n            $http.post('/admin/post', post).then(function(response) {\n                flash.success('Artigo salvo com sucesso');\n                location.href='/admin/post/'+response.data.id+'/edit';\n            }, function(response){\n                if (response.data.slug!=undefined && ($scope.post.slug==undefined || $scope.post.slug==\"\")) {\n                    getSlug();\n                }\n                showErrors(response.data);\n            });\n        }\n\n        var getSlug=function()\n        {\n            $http.post('/slug', {'slug': $scope.post.title}).then(function(response) {\n                $scope.post.slug=response.data;\n            });\n        }\n\n        $scope.update=function(post, id)\n        {\n            $http.put('/admin/post/'+id, post).then(function(response) {\n                flash.success('Artigo atualizado com sucesso');\n                $scope.post=response.data;\n            }, function(response){\n                if (response.data.slug!=undefined && ($scope.post.slug==undefined || $scope.post.slug==\"\")) {\n                    getSlug();\n                }\n                showErrors(response.data);\n            });\n        }\n\n        $scope.forceDelete=function(post)\n        {\n            flash.confirm(function() {\n                $http.delete('/admin/trashed/post/'+post.id).then(function(response) {\n                    var index=posts.all.indexOf(post);\n                    posts.all.splice(index, 1);\n                    var currentPage=$scope.pagination.currentPage;\n\n                    var page=Paginator.setPaginationData(posts.all, posts.filtered, $scope.pagination)\n                    $scope.pagination=page.pagination;\n                    posts=page.entity;\n                    $scope.posts=posts.list;\n                    $scope.setPage(currentPage);\n\n                    flash.success('Artigo excluído com sucesso');\n                }, function(response) {\n                    setTimeout(function() {\n                        flash.error('Artigo não pode ser apagado, verifique as relações, você precisa apagar todas antes.');\n                    }, 100);\n                });\n            }, 'Excluir artigo: ' + post.name, 'Exclusão!', 'Sim, continuar', 'Cancelar');\n        }\n\n        $scope.restore=function(post)\n        {\n            flash.confirm(function() {\n                $http.put('/admin/restore/post/'+post.id).then(function(response) {\n                    flash.success('Artigo desativado com sucesso');\n                    location.href='/admin/post';\n                }, function(response) {\n                    setTimeout(function() {\n                        showErrors(response.data);\n                    }, 100);\n                });\n            }, 'Reativar artigo: ' + post.title, 'Ativar!', 'Sim, continuar', 'Cancelar');\n        }\n\n        $scope.all=function()\n        {\n            $http.get('/admin/post/all').then(function(response) {\n                var data=response.data;\n                data=prepareUsers(data);\n                var page=Paginator.setPaginationData(data, data, $scope.pagination)\n                $scope.pagination=page.pagination;\n                posts=page.entity;\n                posts.allCopy=posts.all;\n                $scope.posts=posts.list;\n            }, function(response) {\n                showErrors(response.data);\n            });\n        }\n\n        $scope.delete=function(post)\n        {\n            flash.confirm(function() {\n                $http.delete('/admin/post/'+post.id).then(function(response) {\n                    var index=posts.all.indexOf(post);\n                    posts.all.splice(index, 1);\n                    var currentPage=$scope.pagination.currentPage;\n\n                    var page=Paginator.setPaginationData(posts.all, posts.filtered, $scope.pagination)\n                    $scope.pagination=page.pagination;\n                    posts=page.entity;\n                    $scope.posts=posts.list;\n                    $scope.setPage(currentPage);\n\n                    flash.success('Artigo excluído com sucesso');\n                    location.href='/admin/post';\n                }, function(response) {\n                    setTimeout(function() {\n                        showErrors(response.data);\n                    }, 100);\n                });\n            }, 'Continuar na exclusão de: ' + post.title, 'Exclusão!', 'Sim, continuar', 'Cancelar');\n        }\n\n        $scope.all=function()\n        {\n            $http.get('/admin/post/all').then(function(response) {\n                var data=response.data;\n                data=preparePosts(data);\n                var page=Paginator.setPaginationData(data, data, $scope.pagination)\n                $scope.pagination=page.pagination;\n                posts=page.entity;\n                $scope.posts=posts.list;\n            }, function(response) {\n                showErrors(response.data);\n            });\n        }\n\n        $scope.setPage=function(page)\n        {\n            var data=Paginator.page(posts, page, $scope.pagination);\n            $scope.pagination=data.pagination;\n            $scope.posts=data.entity.list;\n        }\n        \n        $scope.previous=function()\n        {\n            $scope.setPage($scope.pagination.currentPage-1);\n        }\n        $scope.next=function()\n        {\n            $scope.setPage($scope.pagination.currentPage+1);\n        }\n\n        var preparePosts=function(data)\n        {\n            for (var i = data.length - 1; i >= 0; i--) {\n                data[i].updated=moment(data[i].updated_at).format('DD/MM/YYYY hh:mm');\n            }\n\n            return data;\n        }\n\n        $scope.doFilter= function(search)\n        {\n                var filtered = $filter('filter')(posts.all, search);\n                var page=Paginator.setPaginationData(posts.all, filtered, $scope.pagination)\n                $scope.pagination=page.pagination;\n                posts=page.entity;\n                $scope.posts=posts.list;\n                $scope.setPage(1);\n        };\n\n        /**\n         * Ordena objetos\n         */\n        $scope.order = function(property) {\n            var postsOrder = OrderService.get('posts', property);\n\n            posts.all=$filter('orderBy')(posts.all, postsOrder);\n            posts.filtered=$filter('orderBy')(posts.filtered, postsOrder);\n            console.log(posts.filtered);\n            console.log(postsOrder);\n            var page=Paginator.setPaginationData(posts.all, posts.filtered, $scope.pagination)\n            $scope.pagination=page.pagination;\n            posts=page.entity;\n            $scope.posts=posts.list;\n            $scope.setPage(1);\n        };\n\n        /**\n         * Ordem que está ordenado a propriedade\n         */\n        $scope.byOrder = function(property) {\n            return OrderService.byOrder('posts', property);\n        };\n}]);","/*\n* @author: Leandro Henrique Reis <henrique@henriquereis.com>\n* @date:   2016-05-29 19:37:24\n* @last modified by:   Leandro Henrique Reis\n* @last modified time: 2016-07-29 21:49:33\n*/\n\n'use strict';\n\nangular.module('ruptZero')\n.controller('UserController', ['$scope', '$http', '$filter', 'Paginator', 'OrderService', \n    function($scope, $http, $filter, Paginator, OrderService){\n        $scope.pagination= {\n            perPage: 20,\n            currentPage: 1,\n            totalPages: 0,\n            totalItems: 0,\n            currentItem: 0,\n            totalCurrentPage: 0, \n            pageNumbers: []\n        };\n\n        $scope.user={};\n        var users={\n            all: [],\n            filtered: [],\n            list: [],\n            paginated: []\n        };\n\n        $scope.users=[];\n\n        $scope.save=function(user)\n        {\n            $http.post('/admin/user', user).then(function(response) {\n                flash.success('Usuário salvo com sucesso');\n                $scope.user={};\n            }, function(response){\n                showErrors(response.data);\n            });\n        }\n\n        $scope.update=function(user, id)\n        {\n            $http.put('/admin/user/'+id, user).then(function(response) {\n                flash.success('Usuário atualizado com sucesso');\n                $scope.user={};\n            }, function(response){\n                showErrors(response.data);\n            });\n        }\n\n        $scope.forceDelete=function(user)\n        {\n            flash.confirm(function() {\n                $http.delete('/admin/trashed/user/'+user.id).then(function(response) {\n                    var index=users.all.indexOf(user);\n                    users.all.splice(index, 1);\n                    var currentPage=$scope.pagination.currentPage;\n\n                    var page=Paginator.setPaginationData(users.all, users.filtered, $scope.pagination)\n                    $scope.pagination=page.pagination;\n                    users=page.entity;\n                    $scope.users=users.list;\n                    $scope.setPage(currentPage);\n\n                    flash.success('Usuário excluído com sucesso');\n                }, function(response) {\n                    setTimeout(function() {\n                        flash.error('Usuário não pode ser apagado, verifique as relações, você precisa apagar todas antes.');\n                    }, 100);\n                });\n            }, 'Excluir usuário: ' + user.name, 'Exclusão!', 'Sim, continuar', 'Cancelar');\n        }\n\n        $scope.ban=function(user)\n        {\n            flash.confirm(function() {\n                $http.delete('/admin/user/'+user.id).then(function(response) {\n                    var index=users.all.indexOf(user);\n                    //users.all.splice(index, 1);\n                    console.log(response.data);\n                    users.all[index]=prepareUser(response.data);\n                    var currentPage=$scope.pagination.currentPage;\n\n                    var page=Paginator.setPaginationData(users.all, users.filtered, $scope.pagination)\n                    $scope.pagination=page.pagination;\n                    users=page.entity;\n                    $scope.users=users.list;\n                    $scope.setPage(currentPage);\n\n                    flash.success('Usuário desativado com sucesso');\n                }, function(response) {\n                    setTimeout(function() {\n                        showErrors(response.data);\n                    }, 100);\n                });\n            }, 'Desativar usuário: ' + user.name, 'Bloquear!', 'Sim, continuar', 'Cancelar');\n        }\n\n        $scope.restore=function(user)\n        {\n            flash.confirm(function() {\n                $http.put('/admin/restore/user/'+user.id).then(function(response) {\n                    var index=users.all.indexOf(user);\n                    //users.all.splice(index, 1);\n                    console.log(response.data);\n                    users.all[index]=prepareUser(response.data);\n                    var currentPage=$scope.pagination.currentPage;\n\n                    var page=Paginator.setPaginationData(users.all, users.filtered, $scope.pagination)\n                    $scope.pagination=page.pagination;\n                    users=page.entity;\n                    $scope.users=users.list;\n                    $scope.setPage(currentPage);\n\n                    flash.success('Usuário desativado com sucesso');\n                }, function(response) {\n                    setTimeout(function() {\n                        showErrors(response.data);\n                    }, 100);\n                });\n            }, 'Reativar usuário: ' + user.name, 'Desbloquear!', 'Sim, continuar', 'Cancelar');\n        }\n\n        $scope.all=function()\n        {\n            $http.get('/admin/user/all').then(function(response) {\n                var data=response.data;\n                data=prepareUsers(data);\n                var page=Paginator.setPaginationData(data, data, $scope.pagination)\n                $scope.pagination=page.pagination;\n                users=page.entity;\n                users.allCopy=users.all;\n                $scope.users=users.list;\n            }, function(response) {\n                showErrors(response.data);\n            });\n        }\n\n        $scope.updatePasswordMe=function(user)\n        {\n            $http.put('/admin/user/me/password', user).then(function(response) {\n                flash.success('Senha alterada com sucesso');\n                $scope.user={};\n            }, function(response){\n                showErrors(response.data);\n            });\n        }\n\n        $scope.updatePassword=function(user, id)\n        {\n            $http.put('/admin/user/'+id+'/password', user).then(function(response) {\n                flash.success('Senha alterada com sucesso');\n                $scope.user={};\n            }, function(response){\n                showErrors(response.data);\n            });\n        }\n\n        $scope.setPage=function(page)\n        {\n            var data=Paginator.page(users, page, $scope.pagination);\n            $scope.pagination=data.pagination;\n            $scope.users=data.entity.list;\n        }\n        $scope.previous=function()\n        {\n            $scope.setPage($scope.pagination.currentPage-1);\n        }\n        $scope.next=function()\n        {\n            $scope.setPage($scope.pagination.currentPage+1);\n        }\n\n        var prepareUser=function(user)\n        {\n            user.updated=moment(user.updated_at).format('DD/MM/YYYY hh:mm');\n\n            return user;\n        }\n\n        var prepareUsers=function(data)\n        {\n            for (var i = data.length - 1; i >= 0; i--) {\n                data[i]=prepareUser(data[i]);\n            }\n\n            return data;\n        }\n\n        $scope.doFilter= function(search)\n        {\n                var filtered = $filter('filter')(users.all, search);\n                var page=Paginator.setPaginationData(users.all, filtered, $scope.pagination)\n                $scope.pagination=page.pagination;\n                users=page.entity;\n                $scope.users=users.list;\n                $scope.setPage(1);\n        };\n\n        /**\n         * Ordena objetos\n         */\n        $scope.order = function(property) {\n            var usersOrder = OrderService.get('users', property);\n\n            users.all=$filter('orderBy')(users.all, usersOrder);\n            users.filtered=$filter('orderBy')(users.filtered, usersOrder);\n            console.log(users.filtered);\n            console.log(usersOrder);\n            var page=Paginator.setPaginationData(users.all, users.filtered, $scope.pagination)\n            $scope.pagination=page.pagination;\n            users=page.entity;\n            $scope.users=users.list;\n            $scope.setPage(1);\n        };\n\n        /**\n         * Ordem que está ordenado a propriedade\n         */\n        $scope.byOrder = function(property) {\n            return OrderService.byOrder('users', property);\n        };\n}]);","/*\n* @author: Leandro Henrique Reis <henrique@henriquereis.com>\n* @date:   2016-05-29 19:37:24\n* @last modified by:   Leandro Henrique Reis\n* @last modified time: 2016-07-08 06:09:18\n*/\n\n'use strict';\n\nangular.module('ruptZero')\n.controller('ViewController', ['$scope', '$http', '$filter', 'Paginator', 'OrderService', \n    function($scope, $http, $filter, Paginator, OrderService){\n        $scope.pagination= {\n            perPage: 50,\n            currentPage: 1,\n            totalPages: 0,\n            totalItems: 0,\n            currentItem: 0,\n            totalCurrentPage: 0, \n            pageNumbers: []\n        };\n\n        $scope.view={};\n        var views={\n            all: [],\n            filtered: [],\n            list: [],\n            paginated: []\n        };\n\n        $scope.views=[];\n\n        $scope.delete=function(view)\n        {\n            flash.confirm(function() {\n                $http.delete('/admin/view/'+view.id).then(function(response) {\n                    var index=views.all.indexOf(view);\n                    views.all.splice(index, 1);\n                    var currentPage=$scope.pagination.currentPage;\n\n                    var page=Paginator.setPaginationData(views.all, views.filtered, $scope.pagination)\n                    $scope.pagination=page.pagination;\n                    views=page.entity;\n                    $scope.views=views.list;\n                    $scope.setPage(currentPage);\n\n                    flash.success('Relatório excluído com sucesso');\n                }, function(response) {\n                    setTimeout(function() {\n                        showErrors(response.data);\n                    }, 100);\n                });\n            }, 'Continuar na exclusão de: ' + view.name, 'Exclusão!', 'Sim, continuar', 'Cancelar');\n        }\n\n        $scope.all=function()\n        {\n            $http.get('/admin/view/all').then(function(response) {\n                var data=response.data;\n                data=prepareViews(data);\n                var page=Paginator.setPaginationData(data, data, $scope.pagination)\n                $scope.pagination=page.pagination;\n                views=page.entity;\n                $scope.views=views.list;\n            }, function(response) {\n                showErrors(response.data);\n            });\n        }\n\n        $scope.setPage=function(page)\n        {\n            var data=Paginator.page(views, page, $scope.pagination);\n            $scope.pagination=data.pagination;\n            $scope.views=data.entity.list;\n        }\n\n        $scope.previous=function()\n        {\n            $scope.setPage($scope.pagination.currentPage-1);\n        }\n        $scope.next=function()\n        {\n            $scope.setPage($scope.pagination.currentPage+1);\n        }\n\n        var prepareViews=function(data)\n        {\n            for (var i = data.length - 1; i >= 0; i--) {\n                //data[i].updated=moment(data[i].updated_at).format('DD/MM/YYYY hh:mm');\n            }\n\n            return data;\n        }\n\n        $scope.doFilter= function(search)\n        {\n                var filtered = $filter('filter')(views.all, search);\n                var page=Paginator.setPaginationData(views.all, filtered, $scope.pagination)\n                $scope.pagination=page.pagination;\n                views=page.entity;\n                $scope.views=views.list;\n                $scope.setPage(1);\n        };\n\n        /**\n         * Ordena objetos\n         */\n        $scope.order = function(property) {\n            var viewsOrder = OrderService.get('views', property);\n\n            views.all=$filter('orderBy')(views.all, viewsOrder);\n            views.filtered=$filter('orderBy')(views.filtered, viewsOrder);\n            console.log(views.filtered);\n            console.log(viewsOrder);\n            var page=Paginator.setPaginationData(views.all, views.filtered, $scope.pagination)\n            $scope.pagination=page.pagination;\n            views=page.entity;\n            $scope.views=views.list;\n            $scope.setPage(1);\n        };\n\n        /**\n         * Ordem que está ordenado a propriedade\n         */\n        $scope.byOrder = function(property) {\n            return OrderService.byOrder('views', property);\n        };\n}]);","/*\n* @author: Leandro Henrique Reis <henrique@henriquereis.com>\n* @date:   2016-05-30 19:57:34\n* @last modified by:   Leandro Henrique Reis\n* @last modified time: 2016-07-03 10:08:49\n*/\nangular.module(\"PaginatorData\", [])\n.service(\"Paginator\", [\nfunction() {\n        return {\n            setPaginationData: function(all, filtered, pagination) {\n                var chunk    = _.chunk(filtered, pagination.perPage);\n\n                var entity={\n                    all: all,\n                    filtered: filtered,\n                    list: chunk[0],\n                    paginated: chunk\n                };\n\n                pagination.currentPage = 1;\n                pagination.totalItems = Object.keys(filtered).length;\n                pagination.totalPages = Math.ceil(Object.keys(filtered).length / pagination.perPage);\n                pagination.pageNumbers = _.range(1, pagination.totalPages+1);\n                pagination.currentItem=(pagination.currentPage*pagination.perPage)-pagination.perPage+1;\n                pagination.lastCurrentPage=0;\n                if (Object.keys(chunk).length>0) {\n                    pagination.lastCurrentPage=chunk[0].length;\n                }\n                return {'entity': entity, 'pagination': pagination};\n            },\n            page: function(entity, page, pagination)\n            {\n                if (entity.paginated[page-1]==undefined) {\n                    entity.list=[];\n                    pagination.currentItem=0;\n                    pagination.lastCurrentPage=0;\n                    \n                    return {'entity': entity, 'pagination': pagination};\n                }\n                pagination.currentPage = page;\n\n                entity.list = entity.paginated[page-1];\n                pagination.currentItem=(pagination.currentPage*pagination.perPage)-pagination.perPage+1;                          \n                pagination.lastCurrentPage=(pagination.currentPage*pagination.perPage)-pagination.perPage+entity.paginated[page-1].length;\n\n                return {'entity': entity, 'pagination': pagination};\n            },\n            next: function(entity, pagination) {\n                if(pagination.currentPage == pagination.totalPages)\n                {\n                    return false;\n                }\n\n                pagination.currentPage = pagination.currentPage+1;\n\n                entity.list = entity.paginated[pagination.currentPage-1];\n                pagination.currentItem=(pagination.currentPage*pagination.perPage)-pagination.perPage+1;\n                pagination.lastCurrentPage=(pagination.currentPage*pagination.perPage)-pagination.perPage+entity.paginated[page-1].length;\n\n                return {'entity': entity, 'pagination': pagination};\n            },\n            previous: function(entity, pagination)\n            {\n                if(pagination.currentPage == 1)\n                {\n                    return false;\n                }\n\n                pagination.currentPage = pagination.currentPage-1;\n\n                entity.list = entity.paginated[pagination.currentPage-1];\n                pagination.currentItem=(pagination.currentPage*pagination.perPage)-pagination.perPage+1;\n                pagination.lastCurrentPage=(pagination.currentPage*pagination.perPage)-pagination.perPage+entity.paginated[page-1].length;\n\n                return {'entity': entity, 'pagination': pagination};\n            }\n        };\n}]);"],"sourceRoot":"/source/"}